<snippet>
	<content><![CDATA[
class SegmentTree {
private:
    vector<ll> a;   // Input array
    vector<ll> st;  // Segment tree
    vector<ll> lazy;  // Lazy propagation array

    // Helper function to propagate lazy updates
    void pushdown(int pos, int beg, int end) {
        if (lazy[pos] > 0) {
            st[pos] = (end - beg + 1) * lazy[pos];
            if (beg != end) {
                lazy[2 * pos + 1] += lazy[pos];
                lazy[2 * pos + 2] += lazy[pos];
            }
            lazy[pos] = 0;
        }
    }

    // Helper function to build the segment tree
    void build(int beg, int end, int pos) {
        if (beg == end) {
            st[pos] = a[beg];
            return;
        }

        int mid = (beg + end) / 2;
        build(beg, mid, 2 * pos + 1);
        build(mid + 1, end, 2 * pos + 2);
        st[pos] = st[2 * pos + 1] + st[2 * pos + 2];
    }

public:
    // Constructor to initialize the segment tree
    SegmentTree(vector<ll>& arr) : a(arr) {
        int n = arr.size();
        st.resize(4 * n);
        lazy.resize(4 * n, 0);
        build(0, n - 1, 0);
    }

    // Function to update a range [ul, ur] by a value (val)
    void update(int beg, int end, int ul, int ur, ll val, int pos) {
        pushdown(pos, beg, end);
        if (ul <= beg && ur >= end) {
            lazy[pos] = val;
            pushdown(pos, beg, end);
            return;
        }

        if (ul > end || ur < beg) return;

        int mid = (beg + end) / 2;
        update(beg, mid, ul, ur, val, 2 * pos + 1);
        update(mid + 1, end, ul, ur, val, 2 * pos + 2);
        st[pos] = st[2 * pos + 1] + st[2 * pos + 2];
    }

    // Function to query the sum in a range [ql, qr]
    ll query(int beg, int end, int ql, int qr, int pos) {
        pushdown(pos, beg, end);
        if (ql <= beg && qr >= end) {
            return st[pos];
        }

        if (ql > end || qr < beg) return 0;

        int mid = (beg + end) / 2;
        return query(beg, mid, ql, qr, 2 * pos + 1) + query(mid + 1, end, ql, qr, 2 * pos + 2);
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>lazy</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
